input {
  file {
    path => "/pbs_log/20*"
    sincedb_path => "/dev/null"
    # uncomment next line if you want to import existing data
    start_position => beginning
    # uncomment next line to import files with logstash 2.2.x
    # ignore_older => 0
    type => "pbs"
  }
}

filter {

  if "jobname=" in [message] {
    if ";S;" in [message] {
        grok {
	      patterns_dir => "/usr/share/logstash/patterns"
	      match => [ "message", "%{PBS_LOG_START0}" ]
	      match => [ "message", "%{PBS_LOG_START1}" ]
	      named_captures_only => true
	      tag_on_failure => [ "_parse_pbs_start_failure" ]
	} # End of grok
    } else {
        grok {
	      match => [ "message", "%{PBS_LOG_END0}" ]
	      match => [ "message", "%{PBS_LOG_END1}" ]
	      named_captures_only => true
	      tag_on_failure => [ "_parse_pbs_end_failure" ]
	}
    }

    date {
        match => [ "pbs_timestamp", "MM/dd/YYYY HH:mm:ss" ]
	timezone => "CET"
	remove_field => [ "pbs_timestamp" ]
    }

    ## Wall time to hours
    csv {
     # hour:min:second
     columns => [ "hours", "minutes", "seconds"]
     source => "resources_used_walltime"
     separator => ":"
    }
     
    ruby { code => "event.set('used_walltime', ( event.get('hours').to_f  + (event.get('minutes').to_f / 60) + (event.get('seconds').to_f / 3600 )))" }
    mutate { remove_field => [ "hours", "minutes", "seconds"] }
    
    ## CPU time to hours
    csv {
     # hour:min:second
     columns => [ "hours", "minutes", "seconds"]
     source => "resources_used_cput"
     separator => ":"
    }

    ruby { code => "event.set('used_cputime', ( event.get('hours').to_f  + (event.get('minutes').to_f / 60) + (event.get('seconds').to_f / 3600 )))" }
    mutate { remove_field => [ "hours", "minutes", "seconds"] }    
    
    ## exec_host to worker_node
    grok { match => { "exec_host" => "(?<worker_node>.+)\/.*" } }

  } # End of if else

}

output {
  elasticsearch {
    hosts => "elasticsearch:9200"
    index => "pbs"
    template_name => "pbs"
    #protocol => "http"
  }
}
